{"version":3,"sources":["aluno.js"],"names":["fetchAlunos","dispatch","itens","firebaseDatabase","ref","on","snap","forEach","snapChild","item","val","key","push","fetchAlunoFinished","erro","console","log","addAluno","aluno","id","child","set","alunos","type","types","FETCH_ALUNOS"],"mappings":";;;;;;;;;AAAA;;AACA;;AAEA;;AAEO,IAAMA,WAAW,GAAG,SAAdA,WAAc;AAAA,SAAM,UAACC,QAAD,EAAc;AAC7C,QAAIC,KAAK,GAAG,EAAZ;;AAEAC,yBACGC,GADH,CACO,SADP,EAEGC,EAFH,CAEM,OAFN,EAEe,UAAAC,IAAI,EAAI;AACnBA,MAAAA,IAAI,CAACC,OAAL,CAAa,UAAAC,SAAS,EAAI;AACxB,YAAIC,IAAI,GAAGD,SAAS,CAACE,GAAV,EAAX;AACAD,QAAAA,IAAI,CAACE,GAAL,GAAWH,SAAS,CAACG,GAArB;AAEAT,QAAAA,KAAK,CAACU,IAAN,CAAWH,IAAX;AACD,OALD;AAOAR,MAAAA,QAAQ,CAACY,kBAAkB,CAACX,KAAD,CAAnB,CAAR;AACD,KAXH,EAWK,UAAAY,IAAI;AAAA,aAAIC,OAAO,CAACC,GAAR,CAAYF,IAAZ,CAAJ;AAAA,KAXT;AAYC,GAfwB;AAAA,CAApB;;;;AAkBA,IAAMG,QAAQ,GAAG,SAAXA,QAAW,CAACC,KAAD;AAAA,SAAW,iBAAOjB,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,kBAE3BiB,KAAK,IAAI,CAACA,KAAK,CAACC,EAFW;AAAA;AAAA;AAAA;;AAAA;AAAA,8CAIvBhB,qBACHC,GADG,CACC,SADD,EAEHQ,IAFG,CAEEM,KAFF,CAJuB;;AAAA;AAAA;AAAA;;AAAA;AAQzBC,YAAAA,EARyB,GAQpBD,KAAK,CAACC,EARc;AAS7B,mBAAOD,KAAK,CAACC,EAAb;AAT6B;AAAA,8CAWvBhB,qBACHC,GADG,GAEHgB,KAFG,CAEG,aAAaD,EAFhB,EAGHE,GAHG,CAGCH,KAHD,CAXuB;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAiB/BH,YAAAA,OAAO,CAACC,GAAR;;AAjB+B;AAoB/BhB,YAAAA,WAAW;;AApBoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAX;AAAA,CAAjB;;;;AAuBP,IAAMa,kBAAkB,GAAG,SAArBA,kBAAqB,CAAAS,MAAM;AAAA,SAAK;AACpCC,IAAAA,IAAI,EAAEC,eAAMC,YADwB;AAEpCH,IAAAA,MAAM,EAANA;AAFoC,GAAL;AAAA,CAAjC","sourcesContent":["import { showMessage, hideMessage } from \"react-native-flash-message\";\r\nimport { firebaseDatabase } from '../config/db';\r\n\r\nimport types from './types';\r\n\r\nexport const fetchAlunos = () => (dispatch) => {\r\n  var itens = [];\r\n\r\n  firebaseDatabase\r\n    .ref('/alunos')\r\n    .on('value', snap => {\r\n      snap.forEach(snapChild => {\r\n        var item = snapChild.val();\r\n        item.key = snapChild.key;\r\n\r\n        itens.push(item);\r\n      })\r\n\r\n      dispatch(fetchAlunoFinished(itens));\r\n    }, erro => console.log(erro))\r\n  }\r\n\r\n\r\nexport const addAluno = (aluno) => async (dispatch) => {\r\n  try{\r\n    if (aluno && !aluno.id) {\r\n\r\n      await firebaseDatabase\r\n        .ref('/alunos')\r\n        .push(aluno)\r\n    } else {\r\n      var id = aluno.id;\r\n      delete aluno.id\r\n\r\n      await firebaseDatabase\r\n        .ref()\r\n        .child('/alunos/' + id)\r\n        .set(aluno)\r\n    }\r\n  } catch (erro) {\r\n    console.log(erro);\r\n  }\r\n\r\n    fetchAlunos();\r\n}\r\n\r\nconst fetchAlunoFinished = alunos => ({\r\n  type: types.FETCH_ALUNOS,\r\n  alunos,\r\n});"]}