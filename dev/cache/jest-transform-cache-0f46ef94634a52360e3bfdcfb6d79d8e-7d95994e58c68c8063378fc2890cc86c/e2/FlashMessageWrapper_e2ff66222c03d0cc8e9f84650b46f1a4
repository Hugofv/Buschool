6b0975e926ce08111b50617e79421334
"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.styleWithInset = styleWithInset;
exports.styleWithInsetMargin = styleWithInsetMargin;
exports.default = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _propTypes = _interopRequireDefault(require("prop-types"));

var X_WIDTH = 375;
var X_HEIGHT = 812;
var PAD_WIDTH = 768;
var PAD_HEIGHT = 1024;

var _Dimensions$get = _reactNative.Dimensions.get("window"),
    D_HEIGHT = _Dimensions$get.height,
    D_WIDTH = _Dimensions$get.width;

var isIPhoneX = function () {
  if (_reactNative.Platform.OS === "web") return false;
  return _reactNative.Platform.OS === "ios" && (D_HEIGHT === X_HEIGHT && D_WIDTH === X_WIDTH || D_HEIGHT === X_WIDTH && D_WIDTH === X_HEIGHT);
}();

var isIPad = function () {
  if (_reactNative.Platform.OS !== "ios" || isIPhoneX) return false;

  if (D_HEIGHT > D_WIDTH && D_WIDTH < PAD_WIDTH) {
    return false;
  }

  if (D_WIDTH > D_HEIGHT && D_HEIGHT < PAD_WIDTH) {
    return false;
  }

  return true;
}();

var isOrientationLandscape = function isOrientationLandscape(_ref) {
  var width = _ref.width,
      height = _ref.height;
  return width > height;
};

var _customStatusBarHeight = null;

var statusBarHeight = function statusBarHeight() {
  var isLandscape = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

  if (_customStatusBarHeight !== null) {
    return _customStatusBarHeight;
  }

  if (_reactNative.Platform.OS === "android") {
    if (global.Expo) {
      return global.Expo.Constants.statusBarHeight;
    } else {
      return 0;
    }
  }

  if (isIPhoneX) {
    return isLandscape ? 0 : 44;
  }

  if (isIPad) {
    return 20;
  }

  return isLandscape ? 0 : 20;
};

var doubleFromPercentString = function doubleFromPercentString(percent) {
  if (!percent.includes("%")) {
    return 0;
  }

  var dbl = parseFloat(percent) / 100;
  if (isNaN(dbl)) return 0;
  return dbl;
};

function styleWithInset(style, wrapperInset) {
  var hideStatusBar = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
  var prop = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : "padding";

  if (prop === "margin") {
    return styleWithInsetMargin(style, wrapperInset, hideStatusBar);
  }

  var _Dimensions$get2 = _reactNative.Dimensions.get("window"),
      viewWidth = _Dimensions$get2.width;

  var _StyleSheet$flatten = _reactNative.StyleSheet.flatten(style || {}),
      _StyleSheet$flatten$p = _StyleSheet$flatten.padding,
      padding = _StyleSheet$flatten$p === void 0 ? 0 : _StyleSheet$flatten$p,
      _StyleSheet$flatten$p2 = _StyleSheet$flatten.paddingVertical,
      paddingVertical = _StyleSheet$flatten$p2 === void 0 ? padding : _StyleSheet$flatten$p2,
      _StyleSheet$flatten$p3 = _StyleSheet$flatten.paddingHorizontal,
      paddingHorizontal = _StyleSheet$flatten$p3 === void 0 ? padding : _StyleSheet$flatten$p3,
      _StyleSheet$flatten$p4 = _StyleSheet$flatten.paddingTop,
      paddingTop = _StyleSheet$flatten$p4 === void 0 ? paddingVertical : _StyleSheet$flatten$p4,
      _StyleSheet$flatten$p5 = _StyleSheet$flatten.paddingBottom,
      paddingBottom = _StyleSheet$flatten$p5 === void 0 ? paddingVertical : _StyleSheet$flatten$p5,
      _StyleSheet$flatten$p6 = _StyleSheet$flatten.paddingLeft,
      paddingLeft = _StyleSheet$flatten$p6 === void 0 ? paddingHorizontal : _StyleSheet$flatten$p6,
      _StyleSheet$flatten$p7 = _StyleSheet$flatten.paddingRight,
      paddingRight = _StyleSheet$flatten$p7 === void 0 ? paddingHorizontal : _StyleSheet$flatten$p7,
      viewStyle = (0, _objectWithoutProperties2.default)(_StyleSheet$flatten, ["padding", "paddingVertical", "paddingHorizontal", "paddingTop", "paddingBottom", "paddingLeft", "paddingRight"]);

  if (typeof paddingTop !== "number") {
    paddingTop = doubleFromPercentString(paddingTop) * viewWidth;
  }

  if (typeof paddingBottom !== "number") {
    paddingBottom = doubleFromPercentString(paddingBottom) * viewWidth;
  }

  if (typeof paddingLeft !== "number") {
    paddingLeft = doubleFromPercentString(paddingLeft) * viewWidth;
  }

  if (typeof paddingRight !== "number") {
    paddingRight = doubleFromPercentString(paddingRight) * viewWidth;
  }

  return (0, _objectSpread2.default)({}, viewStyle, {
    paddingTop: !!wrapperInset.isIPhoneX || !hideStatusBar ? paddingTop + wrapperInset.insetTop : paddingTop,
    paddingBottom: paddingBottom + wrapperInset.insetBottom,
    paddingLeft: paddingLeft + wrapperInset.insetLeft,
    paddingRight: paddingRight + wrapperInset.insetRight
  });
}

function styleWithInsetMargin(style, wrapperInset) {
  var hideStatusBar = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

  var _Dimensions$get3 = _reactNative.Dimensions.get("window"),
      viewWidth = _Dimensions$get3.width;

  var _StyleSheet$flatten2 = _reactNative.StyleSheet.flatten(style || {}),
      _StyleSheet$flatten2$ = _StyleSheet$flatten2.margin,
      margin = _StyleSheet$flatten2$ === void 0 ? 0 : _StyleSheet$flatten2$,
      _StyleSheet$flatten2$2 = _StyleSheet$flatten2.marginVertical,
      marginVertical = _StyleSheet$flatten2$2 === void 0 ? margin : _StyleSheet$flatten2$2,
      _StyleSheet$flatten2$3 = _StyleSheet$flatten2.marginHorizontal,
      marginHorizontal = _StyleSheet$flatten2$3 === void 0 ? margin : _StyleSheet$flatten2$3,
      _StyleSheet$flatten2$4 = _StyleSheet$flatten2.marginTop,
      marginTop = _StyleSheet$flatten2$4 === void 0 ? marginVertical : _StyleSheet$flatten2$4,
      _StyleSheet$flatten2$5 = _StyleSheet$flatten2.marginBottom,
      marginBottom = _StyleSheet$flatten2$5 === void 0 ? marginVertical : _StyleSheet$flatten2$5,
      _StyleSheet$flatten2$6 = _StyleSheet$flatten2.marginLeft,
      marginLeft = _StyleSheet$flatten2$6 === void 0 ? marginHorizontal : _StyleSheet$flatten2$6,
      _StyleSheet$flatten2$7 = _StyleSheet$flatten2.marginRight,
      marginRight = _StyleSheet$flatten2$7 === void 0 ? marginHorizontal : _StyleSheet$flatten2$7,
      viewStyle = (0, _objectWithoutProperties2.default)(_StyleSheet$flatten2, ["margin", "marginVertical", "marginHorizontal", "marginTop", "marginBottom", "marginLeft", "marginRight"]);

  if (typeof marginTop !== "number") {
    marginTop = doubleFromPercentString(marginTop) * viewWidth;
  }

  if (typeof marginBottom !== "number") {
    marginBottom = doubleFromPercentString(marginBottom) * viewWidth;
  }

  if (typeof marginLeft !== "number") {
    marginLeft = doubleFromPercentString(marginLeft) * viewWidth;
  }

  if (typeof marginRight !== "number") {
    marginRight = doubleFromPercentString(marginRight) * viewWidth;
  }

  return (0, _objectSpread2.default)({}, viewStyle, {
    marginTop: !!wrapperInset.isIPhoneX || !hideStatusBar ? marginTop + wrapperInset.insetTop : marginTop,
    marginBottom: marginBottom + wrapperInset.insetBottom,
    marginLeft: marginLeft + wrapperInset.insetLeft,
    marginRight: marginRight + wrapperInset.insetRight
  });
}

var FlashMessageWrapper = function (_Component) {
  (0, _inherits2.default)(FlashMessageWrapper, _Component);

  function FlashMessageWrapper() {
    var _this;

    (0, _classCallCheck2.default)(this, FlashMessageWrapper);
    _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(FlashMessageWrapper).call(this));
    _this.handleOrientationChange = _this.handleOrientationChange.bind((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)));
    var isLandscape = isOrientationLandscape(_reactNative.Dimensions.get("window"));
    _this.state = {
      isLandscape: isLandscape
    };
    return _this;
  }

  (0, _createClass2.default)(FlashMessageWrapper, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      _reactNative.Dimensions.addEventListener("change", this.handleOrientationChange);
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      _reactNative.Dimensions.removeEventListener("change", this.handleOrientationChange);
    }
  }, {
    key: "handleOrientationChange",
    value: function handleOrientationChange(_ref2) {
      var window = _ref2.window;
      var isLandscape = isOrientationLandscape(window);
      this.setState({
        isLandscape: isLandscape
      });
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          position = _this$props.position,
          children = _this$props.children;
      var isLandscape = this.state.isLandscape;

      var _statusBarHeight = statusBarHeight(isLandscape);

      var wrapper = {
        isLandscape: isLandscape,
        isIPhoneX: isIPhoneX,
        isIPad: isIPad,
        statusBarHeight: _statusBarHeight,
        insetTop: position === "top" ? _statusBarHeight : 0,
        insetLeft: (position === "top" || position === "bottom") && isLandscape ? isIPhoneX ? 21 : 0 : 0,
        insetRight: (position === "top" || position === "bottom") && isLandscape ? isIPhoneX ? 21 : 0 : 0,
        insetBottom: isIPhoneX && position === "bottom" ? isLandscape ? 24 : 34 : 0
      };
      return children(wrapper);
    }
  }]);
  return FlashMessageWrapper;
}(_react.Component);

exports.default = FlashMessageWrapper;
FlashMessageWrapper.defaultProps = {
  position: "top"
};
FlashMessageWrapper.propTypes = {
  position: _propTypes.default.string,
  children: _propTypes.default.func.isRequired
};

FlashMessageWrapper.setStatusBarHeight = function (height) {
  _customStatusBarHeight = height;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,